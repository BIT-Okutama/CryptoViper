{"ast":null,"code":"import _classCallCheck from \"/Users/vincemillora/Documents/Blockchain/cryptoviper/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/vincemillora/Documents/Blockchain/cryptoviper/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/vincemillora/Documents/Blockchain/cryptoviper/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/vincemillora/Documents/Blockchain/cryptoviper/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/vincemillora/Documents/Blockchain/cryptoviper/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/vincemillora/Documents/Blockchain/cryptoviper/src/BodyComponent/LessonComponent/Lesson_11.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport code from './VyperCodes/Code11';\n\nvar Lesson_11 =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Lesson_11, _Component);\n\n  function Lesson_11() {\n    var _this;\n\n    _classCallCheck(this, Lesson_11);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Lesson_11).call(this));\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(Lesson_11, [{\n    key: \"handleSubmitPosition\",\n    value: function handleSubmitPosition(e) {\n      var result = this.refs.ABI.innerText.localeCompare(code.ABI);\n      alert(result);\n      e.preventDefault();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"tabheader center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        class: \"tabs\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        class: \"tab\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        class: \"active\",\n        href: \"#lessonTab\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"See Instructions Here\")), React.createElement(\"li\", {\n        class: \"tab\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"#editorTab\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"Write Your Answers Here\")))), React.createElement(\"div\", {\n        id: \"lessonTab\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"chapterTitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, \" Chapter 11: Keccak256 and Typecasting \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \" We want our \", React.createElement(\"div\", {\n        class: \"types\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"_generateRandomDna\"), \" function to return a random \", React.createElement(\"div\", {\n        class: \"types\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"uint\"), \". To accomplish this, we can use the \", React.createElement(\"div\", {\n        class: \"types\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"sha3\"), \" function. \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, \" Ethereum has the hash function \", React.createElement(\"div\", {\n        class: \"types\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, \"keccak256\"), \" built in, which is a version of \", React.createElement(\"div\", {\n        class: \"terms\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, \"SHA3\"), \". In Vyper, this hash function is named as \", React.createElement(\"div\", {\n        class: \"types\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, \"sha3\"), \". A hash function basically maps an input into a random 256-bit hexidecimal number. A slight change in the input will cause a large change in the hash. \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \" It's useful for many purposes in Ethereum, but for right now we're just going to use it for pseudo-random number generation. \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, \" Also important, \", React.createElement(\"div\", {\n        class: \"types\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, \"sha3\"), \" expects a single parameter of type \", React.createElement(\"div\", {\n        class: \"types\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, \"bytes\"), \". It also has a return value so it expects a variable will catch it. \"), React.createElement(\"div\", {\n        class: \"codeblock\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        class: \"codes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"comments\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, \"# This is a sample sha3 implementation:\"), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        class: \"views\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"self\"), \".name = \", React.createElement(\"div\", {\n        class: \"types\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"sha3\"), \"(\\\"bytes\\\")\")), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Typecasting\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Sometimes you need to convert between variable types. To convert a variable type to another, you can use \", React.createElement(\"div\", {\n        class: \"types\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"convert\"), \".\"), React.createElement(\"div\", {\n        class: \"codeblock\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        class: \"codes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"comments\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"# This is a sample conversion of types:\"), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        class: \"views\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"self\"), \".name = \", React.createElement(\"div\", {\n        class: \"types\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"convert\"), \"(123, '\", React.createElement(\"div\", {\n        class: \"types\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"bytes\"), \"') \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        class: \"views\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"self\"), \".number = \", React.createElement(\"div\", {\n        class: \"types\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"convert\"), \"(\\\"test\\\", '\", React.createElement(\"div\", {\n        class: \"types\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"uint256\"), \"')\")), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"Let's test it\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \" Let's fill in the body of our \", React.createElement(\"div\", {\n        class: \"types\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"_generateRandomDna\"), \" function! Here's what it should do: \"), React.createElement(\"p\", {\n        class: \"indent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"1. The first line of code should take the \", React.createElement(\"div\", {\n        class: \"terms\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"keccak256 hash\"), \" of \", React.createElement(\"div\", {\n        class: \"types\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"_str\"), \" to generate a random hexadecimal, typecast it as a \", React.createElement(\"div\", {\n        class: \"types\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"uint256\"), \", and finally store the result in a \", React.createElement(\"div\", {\n        class: \"types\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"uint256\"), \" called \", React.createElement(\"div\", {\n        class: \"types\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"rand\"), \". \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }), \"2. We want our DNA to only be 16 digits long (remember our \", React.createElement(\"div\", {\n        class: \"types\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"dnaModulus\"), \"?). So the second line of code should return the above value modulus (%) \", React.createElement(\"div\", {\n        class: \"types\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"dnaModulus\"), \". \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        class: \"forms\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.handleSubmitPosition.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"editorTab\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \" This is the editor, you can type your answer here. If your answer is correct, you can proceed to the next level. Good luck!\"), React.createElement(\"div\", {\n        class: \"editorBox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"tab-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"tab-pane active\",\n        id: \"editorTab\",\n        role: \"tabpanel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        ref: \"usercode\",\n        id: \"editor\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, code.initialCode)))), React.createElement(\"button\", {\n        type: \"submit\",\n        class: \"cbtn right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Submit\"), React.createElement(\"button\", {\n        type: \"button\",\n        id: \"compileBtn\",\n        class: \"cbtn2 right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Compile\"), React.createElement(\"div\", {\n        ref: \"ABI\",\n        id: \"abiCompact\",\n        class: \"abi-box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }))))), React.createElement(\"footer\", {\n        class: \"footer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        class: \"pagination right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        class: \"waves-effect\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/lesson_10\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        class: \"material-icons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"chevron_left\"))), React.createElement(\"li\", {\n        class: \"active\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"#!\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"11\")), React.createElement(\"li\", {\n        class: \"waves-effect\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/lesson_12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        class: \"material-icons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"chevron_right\"))))));\n    }\n  }]);\n\n  return Lesson_11;\n}(Component);\n\nexport default Lesson_11;","map":{"version":3,"sources":["/Users/vincemillora/Documents/Blockchain/cryptoviper/src/BodyComponent/LessonComponent/Lesson_11.js"],"names":["React","Component","Link","code","Lesson_11","state","e","result","refs","ABI","innerText","localeCompare","alert","preventDefault","handleSubmitPosition","bind","initialCode"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport code from './VyperCodes/Code11';\n\nclass Lesson_11 extends Component {\n  constructor() {\n    super()\n    this.state = {\n    };\n  }\n\n  handleSubmitPosition(e) {\n    var result = this.refs.ABI.innerText.localeCompare(code.ABI);\n    alert(result);\n    e.preventDefault();\n  }\n\n  render() {\n    return (\n      <div>\n        <div class=\"body\">\n          <div class=\"tabheader center\">\n            <ul class=\"tabs\">\n              <li class=\"tab\"><a class=\"active\" href=\"#lessonTab\">See Instructions Here</a></li>\n              <li class=\"tab\"><a href=\"#editorTab\">Write Your Answers Here</a></li>\n            </ul>\n          </div>\n\n          <div id=\"lessonTab\">\n            <h5 class=\"chapterTitle\"> Chapter 11: Keccak256 and Typecasting </h5>\n            <p> We want our <div class=\"types\">_generateRandomDna</div> function to return a random <div class=\"types\">uint</div>. To accomplish this, we can use the <div class=\"types\">sha3</div> function. </p>\n            <p> Ethereum has the hash function <div class=\"types\">keccak256</div> built in, which is a version of <div class=\"terms\">SHA3</div>. In Vyper, this hash function is named as <div class=\"types\">sha3</div>. A hash function basically maps an input into a random 256-bit hexidecimal number. A slight change in the input will cause a large change in the hash. </p>\n            <p> It's useful for many purposes in Ethereum, but for right now we're just going to use it for pseudo-random number generation. </p>\n            <p> Also important, <div class=\"types\">sha3</div> expects a single parameter of type <div class=\"types\">bytes</div>. It also has a return value so it expects a variable will catch it. </p>\n            <div class=\"codeblock\">\n              <p class=\"codes\">\n                <div class=\"comments\"># This is a sample sha3 implementation:</div> <br></br>\n                <div class=\"views\">self</div>.name = <div class=\"types\">sha3</div>(\"bytes\")\n              </p>\n            </div>\n\n            <br></br>\n            <h5>Typecasting</h5>\n            <p>Sometimes you need to convert between variable types. To convert a variable type to another, you can use <div class=\"types\">convert</div>.</p>\n            <div class=\"codeblock\">\n              <p class=\"codes\">\n                <div class=\"comments\"># This is a sample conversion of types:</div> <br></br>\n                <div class=\"views\">self</div>.name = <div class=\"types\">convert</div>(123, '<div class=\"types\">bytes</div>') <br></br>\n                <div class=\"views\">self</div>.number = <div class=\"types\">convert</div>(\"test\", '<div class=\"types\">uint256</div>')\n              </p>\n            </div>\n\n            <br></br>\n            <h5>Let's test it</h5>\n            <p> Let's fill in the body of our <div class=\"types\">_generateRandomDna</div> function! Here's what it should do: </p>\n\n            <p class=\"indent\"> \n              1. The first line of code should take the <div class=\"terms\">keccak256 hash</div> of <div class=\"types\">_str</div> to generate a random hexadecimal, typecast it as a <div class=\"types\">uint256</div>, and finally store the result in a <div class=\"types\">uint256</div> called <div class=\"types\">rand</div>. <br></br>\n              2. We want our DNA to only be 16 digits long (remember our <div class=\"types\">dnaModulus</div>?). So the second line of code should return the above value modulus (%) <div class=\"types\">dnaModulus</div>. <br></br>\n            </p>\n          </div>\n\n          <div class=\"forms\">\n            <form onSubmit={this.handleSubmitPosition.bind(this)}>\n              <div id=\"editorTab\">\n                <p> This is the editor, you can type your answer here. If your answer is correct, you can proceed to the next level. Good luck!</p>\n                <div class=\"editorBox\">\n                    <div class=\"tab-content\">\n                      <div class=\"tab-pane active\" id=\"editorTab\" role=\"tabpanel\">\n                        <div ref=\"usercode\" id=\"editor\">{ code.initialCode }</div>\n                      </div>\n                    </div>\n                </div>\n\n                <button type=\"submit\" class=\"cbtn right\">Submit</button>\n                <button type=\"button\" id=\"compileBtn\" class=\"cbtn2 right\">Compile</button>\n\n                <div ref=\"ABI\" id=\"abiCompact\" class=\"abi-box\"></div>\n              </div>\n            </form>\n          </div>\n        </div>\n\n        <footer class=\"footer\">\n          <ul class=\"pagination right\">\n            <li class=\"waves-effect\"><Link to=\"/lesson_10\" ><i class=\"material-icons\">chevron_left</i></Link></li>\n            <li class=\"active\"><a href=\"#!\">11</a></li>\n            <li class=\"waves-effect\"><Link to=\"/lesson_12\" ><i class=\"material-icons\">chevron_right</i></Link></li>\n        </ul>\n        </footer>\n      </div>\n    )\n  }\n}\nexport default Lesson_11;"]},"metadata":{},"sourceType":"module"}