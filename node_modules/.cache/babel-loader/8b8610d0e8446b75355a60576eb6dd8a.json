{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _idgen = require('./idgen');\n\nvar _idgen2 = _interopRequireDefault(_idgen);\n\nvar _constants = require('./constants');\n\nvar _constants2 = _interopRequireDefault(_constants);\n\nvar _Icon = require('./Icon');\n\nvar _Icon2 = _interopRequireDefault(_Icon);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Input = function (_Component) {\n  _inherits(Input, _Component);\n\n  function Input(props) {\n    _classCallCheck(this, Input);\n\n    var _this = _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this, props));\n\n    _this.state = {\n      value: props.value || props.defaultValue,\n      checked: !!props.checked\n    };\n    _this._onChange = _this._onChange.bind(_this);\n    _this.getMultipleValues = _this.getMultipleValues.bind(_this);\n    _this.isSelect = _this.isSelect.bind(_this);\n    return _this;\n  }\n\n  _createClass(Input, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.isMaterialSelect()) {\n        $(this.selectInput).material_select();\n        $(this.selectInput).on('change', this._onChange);\n      }\n\n      if (this.isDatePicker) {\n        $(this.dateInput).pickadate(this.props.options);\n        $(this.dateInput).on('change', this._onChange);\n      }\n\n      if (this.isTimePicker) {\n        $(this.timeInput).pickatime(this.props.options);\n        $(this.timeInput).on('change', this._onChange);\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      if (this.isMaterialSelect() && !this.props.multiple) {\n        $(this.selectInput).material_select();\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      if (nextProps.type === 'checkbox' && this.state.checked !== nextProps.checked) {\n        this.setState({\n          checked: nextProps.checked\n        });\n      }\n\n      if (this.isMaterialSelect() && !this.props.multiple) {\n        this.setState({\n          value: nextProps.defaultValue\n        }, function () {\n          return $(_this2.selectInput).material_select();\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.isMaterialSelect()) {\n        $(this.selectInput).off('change', this._onChange);\n      }\n    }\n  }, {\n    key: 'getMultipleValues',\n    value: function getMultipleValues(_ref) {\n      var options = _ref.options;\n\n      if (!options) {\n        return;\n      }\n\n      return Array.from(options).filter(function (opt) {\n        return opt.selected;\n      }).map(function (opt) {\n        return opt.value;\n      });\n    }\n  }, {\n    key: '_onChange',\n    value: function _onChange(e) {\n      var onChange = this.props.onChange;\n      var types = {\n        checkbox: e.target.checked,\n        radio: e.target.checked,\n        'select-multiple': this.getMultipleValues(e.target),\n        default: e.target.value\n      };\n      var value = types.hasOwnProperty(e.target.type) ? types[e.target.type] : types['default'];\n\n      if (onChange) {\n        onChange(e, value);\n      }\n\n      this.setState({\n        value: value,\n        checked: e.target.checked\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var _props = this.props,\n          browserDefault = _props.browserDefault,\n          children = _props.children,\n          className = _props.className,\n          labelClassName = _props.labelClassName,\n          defaultValue = _props.defaultValue,\n          error = _props.error,\n          label = _props.label,\n          multiple = _props.multiple,\n          placeholder = _props.placeholder,\n          success = _props.success,\n          s = _props.s,\n          m = _props.m,\n          l = _props.l,\n          type = _props.type,\n          validate = _props.validate,\n          onLabel = _props.onLabel,\n          offLabel = _props.offLabel,\n          inline = _props.inline,\n          other = _objectWithoutProperties(_props, ['browserDefault', 'children', 'className', 'labelClassName', 'defaultValue', 'error', 'label', 'multiple', 'placeholder', 'success', 's', 'm', 'l', 'type', 'validate', 'onLabel', 'offLabel', 'inline']);\n\n      var sizes = {\n        s: s,\n        m: m,\n        l: l\n      };\n      this._id = this._id || this.props.id || 'input_' + (0, _idgen2.default)();\n      var classes = {\n        col: true,\n        inline: type !== 'checkbox' && type !== 'radio' && inline,\n        'input-field': type !== 'checkbox' && type !== 'radio' && type !== 'file',\n        'file-field': type === 'file'\n      };\n\n      _constants2.default.SIZES.forEach(function (size) {\n        classes[size + sizes[size]] = sizes[size];\n      });\n\n      var inputClasses = {\n        validate: validate,\n        invalid: error,\n        valid: success,\n        'browser-default': browserDefault && this.isSelect()\n      };\n      var C = void 0,\n          inputType = void 0;\n\n      switch (type) {\n        case 'textarea':\n          C = 'textarea';\n          inputClasses['materialize-textarea'] = true;\n          break;\n\n        case 'switch':\n          C = 'input';\n          inputType = 'checkbox';\n          break;\n\n        case 'file':\n          C = 'input';\n          inputClasses['file-path'] = true;\n          break;\n\n        default:\n          C = 'input';\n          inputType = type || 'text';\n      }\n\n      var labelClasses = {\n        active: this.state.value || this.isSelect() || placeholder\n      };\n      var htmlLabel = label || inputType === 'radio' ? _react2.default.createElement('label', {\n        className: (0, _classnames2.default)(labelClasses, labelClassName),\n        'data-success': success,\n        'data-error': error,\n        htmlFor: this._id\n      }, label) : null;\n\n      if (this.isSelect()) {\n        var options = placeholder && !defaultValue ? [_react2.default.createElement('option', {\n          disabled: true,\n          key: (0, _idgen2.default)()\n        }, placeholder)] : [];\n        options = options.concat(_react2.default.Children.map(children, function (child) {\n          return _react2.default.cloneElement(child, {\n            key: child.props.value\n          });\n        }));\n        return _react2.default.createElement('div', {\n          className: (0, _classnames2.default)(classes)\n        }, this.renderIcon(), htmlLabel, _react2.default.createElement('select', _extends({}, other, {\n          multiple: multiple,\n          id: this._id,\n          className: (0, _classnames2.default)(className, inputClasses),\n          ref: function ref(_ref2) {\n            return _this3.selectInput = _ref2;\n          },\n          defaultValue: defaultValue\n        }), options));\n      } else if (type === 'date') {\n        this.isDatePicker = true;\n        delete other.options;\n        return _react2.default.createElement('div', {\n          className: (0, _classnames2.default)(classes)\n        }, this.renderIcon(), _react2.default.createElement(C, _extends({}, other, {\n          className: (0, _classnames2.default)(className, inputClasses),\n          defaultValue: defaultValue,\n          id: this._id,\n          ref: function ref(_ref3) {\n            return _this3.dateInput = _ref3;\n          },\n          placeholder: placeholder,\n          type: 'date'\n        })), htmlLabel);\n      } else if (type === 'time') {\n        this.isTimePicker = true;\n        delete other.options;\n        return _react2.default.createElement('div', {\n          className: (0, _classnames2.default)(classes)\n        }, this.renderIcon(), _react2.default.createElement(C, _extends({}, other, {\n          className: (0, _classnames2.default)(className, inputClasses),\n          defaultValue: defaultValue,\n          id: this._id,\n          ref: function ref(_ref4) {\n            return _this3.timeInput = _ref4;\n          },\n          placeholder: placeholder\n        })), htmlLabel);\n      } else if (type === 'switch') {\n        return _react2.default.createElement('div', {\n          className: 'switch'\n        }, _react2.default.createElement('label', null, offLabel || 'Off', _react2.default.createElement('input', _extends({}, other, {\n          onChange: this._onChange,\n          type: 'checkbox'\n        })), _react2.default.createElement('span', {\n          className: 'lever'\n        }), onLabel || 'On'));\n      } else if (type === 'file') {\n        return _react2.default.createElement('div', {\n          className: (0, _classnames2.default)(classes)\n        }, _react2.default.createElement('div', {\n          className: 'btn'\n        }, _react2.default.createElement('span', null, label), _react2.default.createElement(C, _extends({\n          type: 'file',\n          multiple: multiple\n        }, other))), _react2.default.createElement('div', {\n          className: 'file-path-wrapper'\n        }, _react2.default.createElement(C, {\n          type: 'text',\n          className: (0, _classnames2.default)(className, inputClasses),\n          defaultValue: defaultValue,\n          id: this._id,\n          placeholder: placeholder\n        })));\n      } else {\n        var _defaultValue = inputType !== 'checkbox' && inputType !== 'radio' ? this.state.value : _defaultValue;\n\n        if (inputType === 'checkbox' || inputType === 'radio') {\n          return _react2.default.createElement('div', {\n            className: (0, _classnames2.default)(classes)\n          }, this.renderIcon(), _react2.default.createElement(C, _extends({}, other, {\n            className: (0, _classnames2.default)(className, inputClasses),\n            ref: function ref(_ref5) {\n              return _this3.input = _ref5;\n            },\n            id: this._id,\n            checked: this.state.checked,\n            onChange: this._onChange,\n            placeholder: placeholder,\n            type: inputType\n          })), htmlLabel);\n        }\n\n        return _react2.default.createElement('div', {\n          className: (0, _classnames2.default)(classes)\n        }, this.renderIcon(), _react2.default.createElement(C, _extends({}, other, {\n          className: (0, _classnames2.default)(className, inputClasses),\n          ref: function ref(_ref6) {\n            return _this3.input = _ref6;\n          },\n          defaultValue: _defaultValue,\n          id: this._id,\n          onChange: this._onChange,\n          placeholder: placeholder,\n          type: inputType\n        })), htmlLabel);\n      }\n    }\n  }, {\n    key: 'renderIcon',\n    value: function renderIcon() {\n      var _props2 = this.props,\n          icon = _props2.icon,\n          children = _props2.children;\n\n      if (icon) {\n        return _react2.default.createElement(_Icon2.default, {\n          className: 'prefix'\n        }, icon);\n      } else {\n        var _icon = null;\n\n        if (_react2.default.Children.count(children) === 1 && !Array.isArray(children)) {\n          _icon = _react2.default.Children.only(children);\n        }\n\n        return _icon === null ? null : _react2.default.cloneElement(_icon, {\n          className: 'prefix'\n        });\n      }\n    }\n  }, {\n    key: 'isSelect',\n    value: function isSelect() {\n      return this.props.type === 'select';\n    }\n  }, {\n    key: 'isMaterialSelect',\n    value: function isMaterialSelect() {\n      return this.props.type === 'select' && !this.props.browserDefault && typeof $ !== 'undefined';\n    }\n  }]);\n\n  return Input;\n}(_react.Component);\n\nInput.propTypes = {\n  s: _propTypes2.default.number,\n  m: _propTypes2.default.number,\n  l: _propTypes2.default.number,\n  inline: _propTypes2.default.bool,\n  children: _propTypes2.default.node,\n  className: _propTypes2.default.string,\n  labelClassName: _propTypes2.default.string,\n  label: _propTypes2.default.node,\n  error: _propTypes2.default.string,\n  success: _propTypes2.default.string,\n\n  /**\n   * Input field type, e.g. select, checkbox, radio, text, tel, email, file\n   * @default 'text'\n   */\n  type: _propTypes2.default.string,\n  defaultValue: _propTypes2.default.any,\n  placeholder: _propTypes2.default.string,\n  id: _propTypes2.default.string,\n  icon: _propTypes2.default.string,\n  name: _propTypes2.default.string,\n  validate: _propTypes2.default.bool,\n  multiple: _propTypes2.default.bool,\n  browserDefault: _propTypes2.default.bool,\n  checked: _propTypes2.default.bool,\n  onLabel: _propTypes2.default.string,\n  offLabel: _propTypes2.default.string,\n  onChange: _propTypes2.default.func,\n  options: _propTypes2.default.any,\n\n  /**\n   * Value used to set a initial value\n   */\n  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.array])\n};\nInput.defaultProps = {\n  type: 'text',\n  checked: false\n};\nexports.default = Input;","map":null,"metadata":{},"sourceType":"script"}