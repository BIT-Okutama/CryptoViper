{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.SHA3Hash = exports.SHA3 = exports.Keccak = void 0;\n\nvar _buffer = require(\"buffer\");\n\nvar _sponge = _interopRequireDefault(require(\"./sponge\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar createHash = function createHash(_ref) {\n  var padding = _ref.padding;\n  return function Hash() {\n    var _this = this;\n\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 512;\n\n    if (!this || this.constructor !== Hash) {\n      return new Hash(size);\n    }\n\n    var sponge = new _sponge.default({\n      capacity: size,\n      padding: padding\n    });\n\n    this.update = function (input) {\n      if (_buffer.Buffer.isBuffer(input)) {\n        sponge.absorb(input);\n        return _this;\n      }\n\n      if (typeof input === \"string\") {\n        return _this.update(_buffer.Buffer.from(input, \"utf8\"));\n      }\n\n      throw new TypeError(\"Not a string or buffer\");\n    };\n\n    this.digest = function () {\n      var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"binary\";\n      var buffer = sponge.squeeze();\n\n      if (format && format !== \"binary\") {\n        return buffer.toString(format);\n      }\n\n      return buffer;\n    };\n\n    this.reset = function () {\n      sponge.reset();\n      return _this;\n    };\n\n    return this;\n  };\n};\n\nvar Keccak = createHash({\n  padding: 1\n});\nexports.Keccak = Keccak;\nvar SHA3 = createHash({\n  padding: 6\n});\nexports.SHA3 = SHA3;\nvar SHA3Hash = Keccak;\nexports.SHA3Hash = SHA3Hash;\nSHA3.SHA3Hash = SHA3Hash;\nvar _default = SHA3;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}